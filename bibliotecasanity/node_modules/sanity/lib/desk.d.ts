/// <reference types="react" />

import {CardProps} from '@sanity/ui'
import {ConfigContext} from 'sanity'
import {Context} from 'react'
import {DocumentActionComponent} from 'sanity'
import {DocumentBadgeComponent} from 'sanity'
import {DocumentFieldAction} from 'sanity'
import {DocumentFieldActionNode} from 'sanity'
import {DocumentFormNode} from 'sanity'
import {DocumentInspector} from 'sanity'
import {DocumentLanguageFilterComponent} from 'sanity'
import {DocumentStore} from 'sanity'
import {EditStateFor} from 'sanity'
import {GeneralPreviewLayoutKey} from 'sanity'
import {HTMLProps} from 'react'
import {I18nTextRecord} from 'sanity'
import {InitialValueTemplateItem} from 'sanity'
import {JSX as JSX_2} from 'react'
import {LocaleSource} from 'sanity'
import {MemoExoticComponent} from 'react'
import {NamedExoticComponent} from 'react'
import {ObjectSchemaType} from '@sanity/types'
import {Observable} from 'rxjs'
import {PatchEvent} from 'sanity'
import {Path} from '@sanity/types'
import {PermissionCheckResult} from 'sanity'
import {PreviewLayoutKey} from 'sanity'
import type {default as React_2} from 'react'
import type * as React_3 from 'react'
import {ReactNode} from 'react'
import {SanityDocument} from '@sanity/types'
import {SanityDocumentLike} from '@sanity/types'
import {SchemaType} from '@sanity/types'
import {SortOrdering} from '@sanity/types'
import {SortOrderingItem} from '@sanity/types'
import {Source} from 'sanity'
import {StateTree} from 'sanity'
import {TimelineStore} from 'sanity'
import {ValidationMarker} from '@sanity/types'

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type BackLinkProps = BackLinkProps_2

/**
 * @hidden
 * @beta */
declare interface BackLinkProps_2 {
  children?: React_2.ReactNode
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type BaseGenericList = BaseGenericList_2

/**
 * Interface for base generic list
 *
 * @public
 */
declare interface BaseGenericList_2 extends StructureNode_2 {
  /** List layout key. */
  defaultLayout?: PreviewLayoutKey
  /** Can handle intent. See {@link IntentChecker} */
  canHandleIntent?: IntentChecker_2
  /** List display options. See {@link ListDisplayOptions} */
  displayOptions?: ListDisplayOptions_2
  /** List child. See {@link Child} */
  child: Child_2
  /** List initial values array. See {@link InitialValueTemplateItem} and {@link InitialValueTemplateItemBuilder} */
  initialValueTemplates?: (InitialValueTemplateItem | InitialValueTemplateItemBuilder_2)[]
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type BaseIntentParams = BaseIntentParams_2

/**
 * Base intent parameters
 *
 * @public
 * @todo dedupe with core
 */
declare interface BaseIntentParams_2 {
  /**
   * Document schema type name to create/edit.
   * Required for `create` intents, optional for `edit` (but encouraged, safer and faster)
   */
  type?: string
  /**
   * ID of the document to create/edit.
   * Required for `edit` intents, optional for `create`.
   */
  id?: string
  /**
   * Name (ID) of initial value template to use for `create` intent. Optional.
   */
  template?: string
  /**
   * Experimental field path
   *
   * @beta
   * @experimental
   * @hidden
   */
  path?: string
  /**
   * Optional "mode" to use for edit intent.
   * Known modes are `structure` and `presentation`.
   */
  mode?: string
  /**
   * Arbitrary/custom parameters are generally discouraged - try to keep them to a minimum,
   * or use `payload` (arbitrary JSON-serializable object) instead.
   */
  [key: string]: string | undefined
}

/** @internal */
export declare interface BaseResolvedPaneNode<T extends PaneNode_2['type']> {
  id: string
  type: T
  title: string
  i18n?: I18nTextRecord<'title'>
  menuItems?: PaneMenuItem_2[]
  menuItemGroups?: PaneMenuItemGroup_2[]
  canHandleIntent?: (
    intentName: string,
    params: Record<string, string | undefined>,
    options: {
      pane: PaneNode_2
      index: number
    },
  ) => boolean
  child?: UnresolvedPaneNode_2
}

declare interface BaseStructureToolPaneProps<T extends PaneNode_2['type']> {
  paneKey: string
  index: number
  itemId: string
  childItemId?: string
  isSelected?: boolean
  isActive?: boolean
  pane: Extract<
    PaneNode_2,
    {
      type: T
    }
  >
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type BaseView = BaseView_2

/**
 * Interface for base view
 *
 * @public */
declare interface BaseView_2 {
  /** View id */
  id: string
  /** View Title */
  title: string
  /** View Icon */
  icon?: React.ComponentType | React.ReactNode
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type BuildableComponent = BuildableComponent_2

/**
 * Interface for buildable component
 *
 * @public
 */
declare interface BuildableComponent_2 extends Partial<StructureNode_2> {
  /** Component of type {@link UserComponent} */
  component?: UserComponent_2
  /** Component child of type {@link Child} */
  child?: Child_2
  /** Component options */
  options?: {
    [key: string]: unknown
  }
  /** Component menu items. See {@link MenuItem} and {@link MenuItemBuilder}  */
  menuItems?: (MenuItem_2 | MenuItemBuilder_2)[]
  /** Component menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */
  menuItemGroups?: (MenuItemGroup_2 | MenuItemGroupBuilder_2)[]
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type BuildableGenericList = BuildableGenericList_2

/**
 * Interface for buildable generic list
 *
 * @public
 */
declare interface BuildableGenericList_2 extends Partial<BaseGenericList_2> {
  /** List menu items array. See {@link MenuItem} and {@link MenuItemBuilder} */
  menuItems?: (MenuItem_2 | MenuItemBuilder_2)[]
  /** List menu items groups array. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */
  menuItemGroups?: (MenuItemGroup_2 | MenuItemGroupBuilder_2)[]
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type BuildableList = BuildableList_2

/**
 * Interface for buildable list
 *
 * @public
 */
declare interface BuildableList_2 extends BuildableGenericList_2 {
  /** List items. See {@link ListItem}, {@link ListItemBuilder} and {@link Divider} */
  items?: (ListItem_2 | ListItemBuilder_2 | Divider_2)[]
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type Builder = Builder_2

/** @internal */
declare type Builder_2 =
  | CollectionBuilder_2
  | ComponentBuilder_2
  | DocumentBuilder_2
  | DocumentListBuilder_2
  | DocumentListItemBuilder_2
  | ListItemBuilder_2
  | MenuItemBuilder_2
  | MenuItemGroupBuilder_2
  | InitialValueTemplateItemBuilder_2

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type Child = Child_2

/**
 * Child of a structure node
 * See {@link Collection}, {@link CollectionBuilder} and {@link ChildResolver}
 *
 * @public
 */
declare type Child_2 = Collection_2 | CollectionBuilder_2 | ChildResolver_2

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type ChildLinkProps = ChildLinkProps_2

/**
 * @hidden
 * @beta */
declare interface ChildLinkProps_2 {
  childId: string
  childParameters?: Record<string, string>
  childPayload?: unknown
  children?: React_2.ReactNode
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type ChildObservable = ChildObservable_2

/**
 * Interface for child observable
 *
 * @public
 */
declare interface ChildObservable_2 {
  /** Subscribes to the child observable. See {@link ItemChild} */
  subscribe: (child: ItemChild_2 | Promise<ItemChild_2>) => Record<string, unknown>
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type ChildResolver = ChildResolver_2

/**
 * Interface for child resolver
 *
 * @public */
declare interface ChildResolver_2 {
  (
    itemId: string,
    options: ChildResolverOptions_2,
  ): ItemChild_2 | Promise<ItemChild_2> | ChildObservable_2 | Observable<ItemChild_2> | undefined
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type ChildResolverOptions = ChildResolverOptions_2

/**
 * Interface for child resolver options
 *
 * @public
 */
declare interface ChildResolverOptions_2 {
  /** Child parent */
  parent: unknown
  /** Child index */
  index: number
  splitIndex: number
  /** Child path */
  path: string[]
  /** Child parameters */
  params: Record<string, string | undefined>
  /** Structure context. See {@link StructureContext} */
  structureContext: StructureContext_2
  /** Serialize options. See {@link SerializeOptions} */
  serializeOptions?: SerializeOptions_2
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type Collection = Collection_2

/**
 * Collection
 * See {@link List}, {@link DocumentList}, {@link EditorNode}, {@link DocumentNode} and {@link Component}
 *
 * @public
 */
declare type Collection_2 = List_2 | DocumentList_2 | EditorNode_2 | DocumentNode_2 | Component_2

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type CollectionBuilder = CollectionBuilder_2

/**
 * Collection builder
 * See {@link ListBuilder}, {@link DocumentListBuilder}, {@link DocumentTypeListBuilder}, {@link DocumentBuilder} and {@link ComponentBuilder}
 *
 * @public
 */
declare type CollectionBuilder_2 =
  | ListBuilder_2
  | DocumentListBuilder_2
  | DocumentTypeListBuilder_2
  | DocumentBuilder_2
  | ComponentBuilder_2

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type Component = Component_2

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const component: (
  componentOrSpec?: UserViewComponent_2 | Partial<ComponentView_2<Record<string, any>>> | undefined,
) => ComponentViewBuilder_2

/**
 * Interface for component
 *
 * @public
 */
declare interface Component_2 extends StructureNode_2 {
  /** Component of type {@link UserComponent} */
  component: UserComponent_2
  /** Component child of type {@link Child} */
  child?: Child_2
  /** Component menu items, array of type {@link MenuItem} */
  menuItems: MenuItem_2[]
  /** Component menu item group, array of type {@link MenuItemGroup} */
  menuItemGroups: MenuItemGroup_2[]
  /** Component options */
  options: {
    [key: string]: unknown
  }
}

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const ComponentBuilder: typeof ComponentBuilder_2

/**
 * Class for building components
 *
 * @public
 */
declare class ComponentBuilder_2 implements Serializable<Component_2> {
  /** component builder option object */
  protected spec: BuildableComponent_2
  constructor(spec?: ComponentInput_2)
  /** Set Component ID
   * @param id - component ID
   * @returns component builder based on ID provided
   */
  id(id: string): ComponentBuilder_2
  /** Get ID
   * @returns ID
   */
  getId(): BuildableComponent_2['id']
  /** Set Component title
   * @param title - component title
   * @returns component builder based on title provided (and ID)
   */
  title(title: string): ComponentBuilder_2
  /** Get Component title
   * @returns title
   */
  getTitle(): BuildableComponent_2['title']
  /** Set the i18n key and namespace used to populate the localized title.
   * @param i18n - the key and namespaced used to populate the localized title.
   * @returns component builder based on i18n key and ns provided
   */
  i18n(i18n: I18nTextRecord<'title'>): ComponentBuilder_2
  /** Get i18n key and namespace used to populate the localized title
   * @returns the i18n key and namespace used to populate the localized title
   */
  getI18n(): I18nTextRecord<'title'> | undefined
  /** Set Component child
   * @param child - child component
   * @returns component builder based on child component provided
   */
  child(child: Child_2): ComponentBuilder_2
  /** Get Component child
   * @returns child component
   */
  getChild(): BuildableComponent_2['child']
  /** Set component
   * @param component - user built component
   * @returns component builder based on component provided
   */
  component(component: UserComponent_2): ComponentBuilder_2
  /** Get Component
   * @returns component
   */
  getComponent(): BuildableComponent_2['component']
  /** Set Component options
   * @param options - component options
   * @returns component builder based on options provided
   */
  options(options: {[key: string]: unknown}): ComponentBuilder_2
  /** Get Component options
   * @returns component options
   */
  getOptions(): NonNullable<BuildableComponent_2['options']>
  /** Set Component menu items
   * @param menuItems - component menu items
   * @returns component builder based on menuItems provided
   */
  menuItems(menuItems: (MenuItem_2 | MenuItemBuilder_2)[]): ComponentBuilder_2
  /** Get Component menu items
   * @returns menu items
   */
  getMenuItems(): BuildableComponent_2['menuItems']
  /** Set Component menu item groups
   * @param menuItemGroups - component menu item groups
   * @returns component builder based on menuItemGroups provided
   */
  menuItemGroups(menuItemGroups: (MenuItemGroup_2 | MenuItemGroupBuilder_2)[]): ComponentBuilder_2
  /** Get Component menu item groups
   * @returns menu item groups
   */
  getMenuItemGroups(): BuildableComponent_2['menuItemGroups']
  /** Serialize component
   * @param options - serialization options
   * @returns component object based on path provided in options
   *
   */
  serialize(options?: SerializeOptions_2): Component_2
  /** Clone component builder (allows for options overriding)
   * @param withSpec - component builder options
   * @returns cloned builder
   */
  clone(withSpec?: BuildableComponent_2): ComponentBuilder_2
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type ComponentInput = ComponentInput_2

/**
 * Interface for component input
 *
 * @public
 */
declare interface ComponentInput_2 extends StructureNode_2 {
  /** Component of type {@link UserComponent} */
  component: UserComponent_2
  /** Component child of type {@link Child} */
  child?: Child_2
  /** Component options */
  options?: {
    [key: string]: unknown
  }
  /** Component menu items. See {@link MenuItem} and {@link MenuItemBuilder}  */
  menuItems?: (MenuItem_2 | MenuItemBuilder_2)[]
  /** Component menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */
  menuItemGroups?: (MenuItemGroup_2 | MenuItemGroupBuilder_2)[]
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type ComponentView = ComponentView_2

/**
 * Interface for component views.
 *
 * @public */
declare interface ComponentView_2<TOptions = Record<string, any>> extends BaseView_2 {
  type: 'component'
  /** Component view components. See {@link UserViewComponent} */
  component: UserViewComponent_2
  /** Component view options */
  options: TOptions
}

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const ComponentViewBuilder: typeof ComponentViewBuilder_2

/**
 * Class for building a component view.
 *
 * @public */
declare class ComponentViewBuilder_2 extends GenericViewBuilder_2<
  Partial<ComponentView_2>,
  ComponentViewBuilder_2
> {
  /** Partial Component view option object. See {@link ComponentView} */
  protected spec: Partial<ComponentView_2>
  constructor(
    /**
     * Component view component or spec
     * @param componentOrSpec - user view component or partial component view. See {@link UserViewComponent} and {@link ComponentView}
     */
    componentOrSpec?: UserViewComponent_2 | Partial<ComponentView_2>,
  )
  /** Set view Component
   * @param component - component view component. See {@link UserViewComponent}
   * @returns component view builder based on component view provided. See {@link ComponentViewBuilder}
   */
  component(component: UserViewComponent_2): ComponentViewBuilder_2
  /** Get view Component
   * @returns Partial component view. See {@link ComponentView}
   */
  getComponent(): Partial<ComponentView_2>['component']
  /** Set view Component options
   * @param options - component view options
   * @returns component view builder based on options provided. See {@link ComponentViewBuilder}
   */
  options(options: {[key: string]: any}): ComponentViewBuilder_2
  /** Get view Component options
   * @returns component view options. See {@link ComponentView}
   */
  getOptions(): ComponentView_2['options']
  /** Serialize view Component
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns component view based on path provided in options. See {@link ComponentView}
   *
   */
  serialize(options?: SerializeOptions_2): ComponentView_2
  /** Clone Component view builder (allows for options overriding)
   * @param withSpec - partial for component view option. See {@link ComponentView}
   * @returns component view builder. See {@link ComponentViewBuilder}
   */
  clone(withSpec?: Partial<ComponentView_2>): ComponentViewBuilder_2
}

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const ConfirmDeleteDialog: typeof ConfirmDeleteDialogContainer

/** @internal */
declare function ConfirmDeleteDialogContainer(props: ConfirmDeleteDialogProps_2): JSX_2.Element

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type ConfirmDeleteDialogProps = ConfirmDeleteDialogProps_2

/** @internal */
declare interface ConfirmDeleteDialogProps_2 {
  /**
   * Incoming document ID used to find other referencing documents. This
   * field respects draft IDs (e.g. if you pass in a published ID when one
   * doesn't exist the document title may not show up).
   */
  id: string
  /**
   * The schema typename of the incoming document
   */
  type: string
  /**
   * The name of the action being done. (e.g. the `'unpublish'` action requires
   * the same document deletion confirmation).
   */
  action?: 'delete' | 'unpublish'
  onCancel: () => void
  onConfirm: () => void
}

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const createStructureBuilder: typeof createStructureBuilder_2

/** @internal */
declare function createStructureBuilder_2({
  defaultDocumentNode,
  source,
}: StructureBuilderOptions_2): StructureBuilder_2

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type CustomComponentPaneNode = CustomComponentPaneNode_2

/** @internal */
declare interface CustomComponentPaneNode_2 extends BaseResolvedPaneNode<'component'> {
  component: UserComponent_2
  options?: Record<string, unknown>
}

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const DEFAULT_INTENT_HANDLER: symbol

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type DefaultDocumentNodeContext = DefaultDocumentNodeContext_2

/**
 * An object holding the documentId and schemaType for the document node being resolved.
 *
 * @public
 */
declare interface DefaultDocumentNodeContext_2 extends ConfigContext {
  /**
   * The id of the sanity document
   */
  documentId?: string
  /**
   * the schema of the sanity document
   */
  schemaType: string
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type DefaultDocumentNodeResolver = DefaultDocumentNodeResolver_2

/**
 * A resolver function used to return the default document node used when editing documents.
 *
 * @public
 *
 * @returns a document node builder, or null/undefined if no document node should be returned.
 *
 */
declare type DefaultDocumentNodeResolver_2 = (
  /**
   * S - an instance of the structure builder, that can be used to build the lists/items/panes for the structure tool
   * context - an object holding various context that may be used to customize the structure, for instance the current user.
   *  Defaults to
   * ```ts
   * (S) => S.defaults()
   * ```
   * See {@link StructureBuilder}
   */
  S: StructureBuilder_2,
  /**
   * An object holding the documentId and schemaType for the document node being resolved.
   * See {@link DefaultDocumentNodeContext}
   */
  options: DefaultDocumentNodeContext_2,
) => DocumentBuilder_2 | null | undefined

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const defaultInitialValueTemplateItems: typeof defaultInitialValueTemplateItems_2

/** @internal */
declare function defaultInitialValueTemplateItems_2(
  context: StructureContext_2,
): InitialValueTemplateItemBuilder_2[]

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const defaultIntentChecker: IntentChecker_2

/**
 * @deprecated Import `structureTool` from `sanity/structure` instead!
 * @hidden
 * @public
 */
export declare const deskTool: any

/**
 * @deprecated Import `StructureToolContextValue` from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type DeskToolContextValue = StructureToolContextValue

/**
 * @deprecated Import `StructureToolFeatures` from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type DeskToolFeatures = StructureToolFeatures

/**
 * @deprecated Import `StructureToolMenuItem` from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type DeskToolMenuItem = MenuItem_2

/**
 * @deprecated Import `StructureToolOptions` from `sanity/structure` instead
 * @hidden
 * @public
 */
export declare type DeskToolOptions = StructureToolOptions

/**
 * @deprecated Import `StructureToolPaneActionHandler` from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type DeskToolPaneActionHandler = StructureToolPaneActionHandler

/**
 * @deprecated Import `StructureToolProvider` from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const DeskToolProvider: typeof StructureToolProvider

/**
 * @deprecated Import `StructureToolProviderProps` from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type DeskToolProviderProps = StructureToolProviderProps

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type Divider = Divider_2

/**
 * A `Divider` is a visual separator in the structure tree.
 *
 * @public
 */
declare interface Divider_2 {
  /**
   * The divider's ID
   */
  id: string
  type: 'divider'
}

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const DocumentBuilder: typeof DocumentBuilder_2

/**
 * A `DocumentBuilder` is used to build a document node.
 *
 * @public */
declare class DocumentBuilder_2 implements Serializable<DocumentNode_2> {
  /**
   * Structure context. See {@link StructureContext}
   */
  protected _context: StructureContext_2
  /** Component builder option object See {@link PartialDocumentNode} */
  protected spec: PartialDocumentNode_2
  constructor(
    /**
     * Structure context. See {@link StructureContext}
     */
    _context: StructureContext_2,
    spec?: PartialDocumentNode_2,
  )
  /** Set Document Builder ID
   * @param id - document builder ID
   * @returns document builder based on ID provided. See {@link DocumentBuilder}
   */
  id(id: string): DocumentBuilder_2
  /** Get Document Builder ID
   * @returns document ID. See {@link PartialDocumentNode}
   */
  getId(): PartialDocumentNode_2['id']
  /** Set Document title
   * @param title - document title
   * @returns document builder based on title provided (and ID). See {@link DocumentBuilder}
   */
  title(title: string): DocumentBuilder_2
  /** Get Document title
   * @returns document title. See {@link PartialDocumentNode}
   */
  getTitle(): PartialDocumentNode_2['title']
  /** Set the i18n key and namespace used to populate the localized title.
   * @param i18n - the key and namespaced used to populate the localized title.
   * @returns component builder based on i18n key and ns provided
   */
  i18n(i18n: I18nTextRecord<'title'>): DocumentBuilder_2
  /** Get i18n key and namespace used to populate the localized title
   * @returns the i18n key and namespace used to populate the localized title
   */
  getI18n(): I18nTextRecord<'title'> | undefined
  /** Set Document child
   * @param child - document child
   * @returns document builder based on child provided. See {@link DocumentBuilder}
   */
  child(child: Child_2): DocumentBuilder_2
  /** Get Document child
   * @returns document child. See {@link PartialDocumentNode}
   */
  getChild(): PartialDocumentNode_2['child']
  /** Set Document ID
   * @param documentId - document ID
   * @returns document builder with document based on ID provided. See {@link DocumentBuilder}
   */
  documentId(documentId: string): DocumentBuilder_2
  /** Get Document ID
   * @returns document ID. See {@link DocumentOptions}
   */
  getDocumentId(): Partial<DocumentOptions_2>['id']
  /** Set Document Type
   * @param documentType - document type
   * @returns document builder with document based on type provided. See {@link DocumentBuilder}
   */
  schemaType(documentType: SchemaType | string): DocumentBuilder_2
  /** Get Document Type
   * @returns document type. See {@link DocumentOptions}
   */
  getSchemaType(): Partial<DocumentOptions_2>['type']
  /** Set Document Template
   * @param templateId - document template ID
   * @param parameters - document template parameters
   * @returns document builder with document based on template provided. See {@link DocumentBuilder}
   */
  initialValueTemplate(templateId: string, parameters?: Record<string, unknown>): DocumentBuilder_2
  /** Get Document Template
   * @returns document template. See {@link DocumentOptions}
   */
  getInitialValueTemplate(): Partial<DocumentOptions_2>['template']
  /** Get Document's initial value Template parameters
   * @returns document template parameters. See {@link DocumentOptions}
   */
  getInitialValueTemplateParameters(): Partial<DocumentOptions_2>['templateParameters']
  /** Set Document views
   * @param views - document views. See {@link ViewBuilder} and {@link View}
   * @returns document builder with document based on views provided. See {@link DocumentBuilder}
   */
  views(views: (View_2 | ViewBuilder_2)[]): DocumentBuilder_2
  /** Get Document views
   * @returns document views. See {@link ViewBuilder} and {@link View}
   */
  getViews(): (View_2 | ViewBuilder_2)[]
  /** Serialize Document builder
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns document node based on path, index and hint provided in options. See {@link DocumentNode}
   */
  serialize({path, index, hint}?: SerializeOptions_2): DocumentNode_2
  /** Clone Document builder
   * @param withSpec - partial document node specification used to extend the cloned builder. See {@link PartialDocumentNode}
   * @returns document builder based on context and spec provided. See {@link DocumentBuilder}
   */
  clone(withSpec?: PartialDocumentNode_2): DocumentBuilder_2
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type DocumentFieldMenuActionNode = DocumentFieldMenuActionNode_2

/**
 * @hidden
 * @beta */
declare type DocumentFieldMenuActionNode_2 = DocumentFieldActionNode & {
  intent?: Intent_2
}

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const documentFromEditor: typeof documentFromEditor_2

/** @internal */
declare function documentFromEditor_2(
  context: StructureContext_2,
  spec?: EditorNode_2,
): DocumentBuilder_2

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const documentFromEditorWithInitialValue: typeof documentFromEditorWithInitialValue_2

/** @internal */
declare function documentFromEditorWithInitialValue_2(
  {resolveDocumentNode, templates}: StructureContext_2,
  templateId: string,
  parameters?: Record<string, unknown>,
): DocumentBuilder_2

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const DocumentInspectorHeader: typeof DocumentInspectorHeader_2

/** @internal */
declare function DocumentInspectorHeader_2(
  props: DocumentInspectorHeaderProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref'>,
): JSX_2.Element

declare interface DocumentInspectorHeaderProps {
  as?: CardProps['as']
  closeButtonLabel: string
  flex?: CardProps['flex']
  onClose: () => void
  title: ReactNode
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type DocumentList = DocumentList_2

/**
 * Interface for document list
 *
 * @public
 */
declare interface DocumentList_2 extends GenericList_2 {
  type: 'documentList'
  /** Document list options. See {@link DocumentListOptions} */
  options: DocumentListOptions_2
  /** Document list child. See {@link Child} */
  child: Child_2
  /** Document schema type name */
  schemaTypeName?: string
}

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const DocumentListBuilder: typeof DocumentListBuilder_2

/**
 * Class for building document list
 *
 * @public
 */
declare class DocumentListBuilder_2 extends GenericListBuilder_2<
  PartialDocumentList_2,
  DocumentListBuilder_2
> {
  /**
   * Structure context. See {@link StructureContext}
   */
  protected _context: StructureContext_2
  /** Document list options. See {@link PartialDocumentList} */
  protected spec: PartialDocumentList_2
  constructor(
    /**
     * Structure context. See {@link StructureContext}
     */
    _context: StructureContext_2,
    spec?: DocumentListInput_2,
  )
  /** Set API version
   * @param apiVersion - API version
   * @returns document list builder based on the options and API version provided. See {@link DocumentListBuilder}
   */
  apiVersion(apiVersion: string): DocumentListBuilder_2
  /** Get API version
   * @returns API version
   */
  getApiVersion(): string | undefined
  /** Set Document list filter
   * @param filter - filter
   * @returns document list builder based on the options and filter provided. See {@link DocumentListBuilder}
   */
  filter(filter: string): DocumentListBuilder_2
  /** Get Document list filter
   * @returns filter
   */
  getFilter(): string | undefined
  /** Set Document list schema type name
   * @param type - schema type name.
   * @returns document list builder based on the schema type name provided. See {@link DocumentListBuilder}
   */
  schemaType(type: SchemaType | string): DocumentListBuilder_2
  /** Get Document list schema type name
   * @returns schema type name
   */
  getSchemaType(): string | undefined
  /** Set Document list options' parameters
   * @param params - parameters
   * @returns document list builder based on the options provided. See {@link DocumentListBuilder}
   */
  params(params: Record<string, unknown>): DocumentListBuilder_2
  /** Get Document list options' parameters
   * @returns options
   */
  getParams(): Record<string, unknown> | undefined
  /** Set Document list default ordering
   * @param ordering - default sort ordering array. See {@link SortOrderingItem}
   * @returns document list builder based on ordering provided. See {@link DocumentListBuilder}
   */
  defaultOrdering(ordering: SortOrderingItem[]): DocumentListBuilder_2
  /** Get Document list default ordering
   * @returns default ordering. See {@link SortOrderingItem}
   */
  getDefaultOrdering(): SortOrderingItem[] | undefined
  /** Serialize Document list
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns document list object based on path provided in options. See {@link DocumentList}
   */
  serialize(options?: SerializeOptions_2): DocumentList_2
  /** Clone Document list builder (allows for options overriding)
   * @param withSpec - override document list spec. See {@link PartialDocumentList}
   * @returns document list builder. See {@link DocumentListBuilder}
   */
  clone(withSpec?: PartialDocumentList_2): DocumentListBuilder_2
  /** Get Document list spec
   * @returns document list spec. See {@link PartialDocumentList}
   */
  getSpec(): PartialDocumentList_2
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type DocumentListInput = DocumentListInput_2

/**
 * Interface for document list input
 *
 * @public
 */
declare interface DocumentListInput_2 extends GenericListInput_2 {
  /** Document list options. See {@link DocumentListOptions} */
  options: DocumentListOptions_2
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type DocumentListItem = DocumentListItem_2

/**
 * Interface for document list item
 *
 * @public
 */
declare interface DocumentListItem_2 extends ListItem_2 {
  /** Document schema type. See {@link SchemaType} */
  schemaType: SchemaType
  /** Document ID */
  _id: string
}

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const DocumentListItemBuilder: typeof DocumentListItemBuilder_2

/**
 * Class for building a document list item
 *
 * @public
 */
declare class DocumentListItemBuilder_2 extends ListItemBuilder_2 {
  /**
   * Structure context. See {@link StructureContext}
   */
  protected _context: StructureContext_2
  /** Document list options. See {@link PartialDocumentListItem} */
  protected spec: PartialDocumentListItem_2
  constructor(
    /**
     * Structure context. See {@link StructureContext}
     */
    _context: StructureContext_2,
    spec?: DocumentListItemInput_2,
  )
  /**
   * Serialize document list item
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns document list item object based on path provided in options. See {@link DocumentListItem}
   */
  serialize(options?: SerializeOptions_2): DocumentListItem_2
  /** Clone Document list item builder (allows for options overriding)
   * @param withSpec - Document list item builder options. See {@link PartialDocumentListItem}
   * @returns document list item builder. See {@link DocumentListItemBuilder}
   */
  clone(withSpec?: PartialDocumentListItem_2): DocumentListItemBuilder_2
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type DocumentListItemInput = DocumentListItemInput_2

/**
 * Interface for document list item input
 *
 * @public
 */
declare interface DocumentListItemInput_2 extends ListItemInput_2 {
  /** Document list item input schema type. See {@link SchemaType} */
  schemaType: SchemaType | string
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type DocumentListOptions = DocumentListOptions_2

/**
 * Interface for document List options
 *
 * @public
 */
declare interface DocumentListOptions_2 {
  /** Document list filter */
  filter: string
  /** Document list parameters */
  params?: Record<string, unknown>
  /** Document list API version */
  apiVersion?: string
  /** Document list API default ordering array. */
  defaultOrdering?: SortOrderingItem[]
}

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const DocumentListPane: NamedExoticComponent<DocumentListPaneProps_2>

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type DocumentListPaneNode = DocumentListPaneNode_2

/** @internal */
declare interface DocumentListPaneNode_2 extends BaseResolvedPaneNode<'documentList'> {
  defaultLayout?: GeneralPreviewLayoutKey
  displayOptions?: {
    showIcons?: boolean
  }
  initialValueTemplates?: InitialValueTemplateItem[]
  options: {
    filter: string
    defaultOrdering?: Array<{
      field: string
      direction: 'asc' | 'desc'
    }>
    params?: Record<string, unknown>
    apiVersion?: string
  }
  schemaTypeName: string
  source?: string
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type DocumentListPaneProps = DocumentListPaneProps_2

/**
 * @internal
 */
declare type DocumentListPaneProps_2 = BaseStructureToolPaneProps<'documentList'>

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type DocumentNode = DocumentNode_2

/**
 * Interface for the document list builder (focused on the document pane)
 *
 * @public */
declare interface DocumentNode_2 extends StructureNode_2 {
  /**
   * Document children. See {@link Child}
   */
  child?: Child_2
  /**
   * Options for the document pane
   */
  options: {
    /** Document Id */
    id: string
    /** Document Type */
    type?: string
    /** Document Template */
    template?: string
    /** Template parameters */
    templateParameters?: {
      [key: string]: any
    }
  }
  /**
   * View array for the document pane. See {@link View}
   */
  views: View_2[]
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type DocumentOptions = DocumentOptions_2

/**
 * Interface for options of Partial Documents. See {@link PartialDocumentNode}
 *
 * @public */
declare interface DocumentOptions_2 {
  /** Document Id */
  id: string
  /** Document Type */
  type: string
  /** Document Template */
  template?: string
  /** Template parameters */
  templateParameters?: Record<string, unknown>
}

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const DocumentPane: NamedExoticComponent<DocumentPaneProviderProps_2>

/** @internal */
declare interface DocumentPaneContextValue {
  actions: DocumentActionComponent[] | null
  activeViewId: string | null
  badges: DocumentBadgeComponent[] | null
  changesOpen: boolean
  closeInspector: (inspectorName?: string) => void
  collapsedFieldSets: StateTree<boolean> | undefined
  collapsedPaths: StateTree<boolean> | undefined
  compareValue: Partial<SanityDocument> | null
  connectionState: 'connecting' | 'reconnecting' | 'connected'
  displayed: Partial<SanityDocument> | null
  documentId: string
  documentIdRaw: string
  documentType: string
  editState: EditStateFor | null
  fieldActions: DocumentFieldAction[]
  focusPath: Path
  index: number
  inspectOpen: boolean
  inspector: DocumentInspector | null
  inspectors: DocumentInspector[]
  menuItemGroups: PaneMenuItemGroup_2[]
  onBlur: (blurredPath: Path) => void
  onChange: (event: PatchEvent) => void
  onFocus: (pathOrEvent: Path) => void
  onHistoryClose: () => void
  onHistoryOpen: () => void
  onInspectClose: () => void
  onMenuAction: (item: PaneMenuItem_2) => void
  onPaneClose: () => void
  onPaneSplit?: () => void
  onPathOpen: (path: Path) => void
  onSetActiveFieldGroup: (path: Path, groupName: string) => void
  onSetCollapsedPath: (path: Path, expanded: boolean) => void
  onSetCollapsedFieldSet: (path: Path, expanded: boolean) => void
  openInspector: (inspectorName: string, paneParams?: Record<string, string>) => void
  paneKey: string
  previewUrl?: string | null
  ready: boolean
  schemaType: ObjectSchemaType
  setTimelineMode: (mode: TimelineMode) => void
  setTimelineRange(since: string | null, rev: string | null): void
  setIsDeleting: (state: boolean) => void
  timelineError: Error | null
  timelineMode: TimelineMode
  timelineStore: TimelineStore
  title: string | null
  validation: ValidationMarker[]
  value: SanityDocumentLike
  views: View_2[]
  formState: DocumentFormNode | null
  permissions?: PermissionCheckResult | null
  isDeleting: boolean
  isDeleted: boolean
  isPermissionsLoading: boolean
  unstable_languageFilter: DocumentLanguageFilterComponent[]
  __internal_tasks?: {
    footerAction: React.ReactNode
  }
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type DocumentPaneNode = DocumentPaneNode_2

/** @internal */
declare interface DocumentPaneNode_2 extends BaseResolvedPaneNode<'document'> {
  options: {
    id: string
    type: string
    template?: string
    templateParameters?: Record<string, unknown>
  }
  source?: string
  views?: View_2[]
}

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const DocumentPaneProvider: MemoExoticComponent<
  (props: DocumentPaneProviderProps_2) => JSX_2.Element
>

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type DocumentPaneProviderProps = DocumentPaneProviderProps_2

/** @internal */
declare type DocumentPaneProviderProps_2 = {
  children?: React.ReactNode
  onFocusPath?: (path: Path) => void
} & BaseStructureToolPaneProps<'document'>

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const DocumentTypeListBuilder: typeof DocumentTypeListBuilder_2

/**
 * Class for building a document type list
 *
 * @public
 */
declare class DocumentTypeListBuilder_2 extends DocumentListBuilder_2 {
  /**
   * Structure context. See {@link StructureContext}
   */
  protected _context: StructureContext_2
  /** Document list options. See {@link PartialDocumentList} */
  protected spec: PartialDocumentList_2
  constructor(
    /**
     * Structure context. See {@link StructureContext}
     */
    _context: StructureContext_2,
    spec?: DocumentListInput_2,
  )
  /**
   * Set Document type list child
   * @param child - Child component. See {@link Child}
   * @returns document type list builder based on child component provided without default intent handler. See {@link DocumentTypeListBuilder}
   */
  child(child: Child_2): DocumentTypeListBuilder_2
  /** Clone Document type list builder (allows for options overriding)
   * @param withSpec - Document type list builder options. See {@link PartialDocumentList}
   * @returns document type list builder. See {@link DocumentTypeListBuilder}
   */
  clone(withSpec?: PartialDocumentList_2): DocumentTypeListBuilder_2
  /** Clone Document type list builder (allows for options overriding) and remove default intent handler
   * @param withSpec - Document type list builder options. See {@link PartialDocumentList}
   * @returns document type list builder without default intent handler. See {@link DocumentTypeListBuilder}
   */
  cloneWithoutDefaultIntentHandler(withSpec?: PartialDocumentList_2): DocumentTypeListBuilder_2
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type DocumentTypeListInput = DocumentTypeListInput_2

/**
 * Interface for document type list input
 *
 * @public
 */
declare interface DocumentTypeListInput_2 extends Partial<GenericListInput_2> {
  /** Document type list input schema type. See {@link SchemaType} */
  schemaType: SchemaType | string
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type EditorNode = EditorNode_2

/**
 * Interface for Editor node
 *
 * @public */
declare interface EditorNode_2 extends StructureNode_2 {
  /** Editor child. See {@link Child} */
  child?: Child_2
  /** Editor options */
  options: {
    /** Editor ID */
    id: string
    /** Editor type */
    type?: string
    /** Editor template */
    template?: string
    /** Template parameters */
    templateParameters?: {
      [key: string]: any
    }
  }
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type EditReferenceOptions = EditReferenceOptions_2

/**
 * @hidden
 * @beta */
declare interface EditReferenceOptions_2 {
  parentRefPath: Path
  id: string
  type: string
  template: {
    id: string
    params?: Record<string, string | number | boolean>
  }
}

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const form: (spec?: Partial<FormView_2> | undefined) => FormViewBuilder_2

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type FormView = FormView_2

/**
 * Interface for form views.
 *
 * @public */
declare interface FormView_2 extends BaseView_2 {
  type: 'form'
}

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const FormViewBuilder: typeof FormViewBuilder_2

/**
 * Class for building a form view.
 *
 * @public */
declare class FormViewBuilder_2 extends GenericViewBuilder_2<
  Partial<BaseView_2>,
  FormViewBuilder_2
> {
  /** Document list options. See {@link FormView} */
  protected spec: Partial<FormView_2>
  constructor(spec?: Partial<FormView_2>)
  /**
   * Serialize Form view builder
   * @param options - Serialize options. See {@link SerializeOptions}
   * @returns form view builder based on path provided in options. See {@link FormView}
   */
  serialize(options?: SerializeOptions_2): FormView_2
  /**
   * Clone Form view builder (allows for options overriding)
   * @param withSpec - Partial form view builder options. See {@link FormView}
   * @returns form view builder. See {@link FormViewBuilder}
   */
  clone(withSpec?: Partial<FormView_2>): FormViewBuilder_2
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type GenericList = GenericList_2

/**
 * Interface for generic list
 *
 * @public
 */
declare interface GenericList_2 extends BaseGenericList_2 {
  /** List type */
  type: string
  /** List menu items array. See {@link MenuItem} */
  menuItems: MenuItem_2[]
  /** List menu item groups array. See {@link MenuItemGroup} */
  menuItemGroups: MenuItemGroup_2[]
}

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const GenericListBuilder: typeof GenericListBuilder_2

/**
 * Class for building generic lists
 *
 * @public
 */
declare abstract class GenericListBuilder_2<TList extends BuildableGenericList_2, ConcreteImpl>
  implements Serializable<GenericList_2>
{
  /** Check if initial value templates are set */
  protected initialValueTemplatesSpecified: boolean
  /** Generic list option object */
  protected spec: TList
  /** Set generic list ID
   * @param id - generic list ID
   * @returns generic list builder based on ID provided.
   */
  id(id: string): ConcreteImpl
  /** Get generic list ID
   * @returns generic list ID
   */
  getId(): TList['id']
  /** Set generic list title
   * @param title - generic list title
   * @returns generic list builder based on title and ID provided.
   */
  title(title: string): ConcreteImpl
  /** Get generic list title
   * @returns generic list title
   */
  getTitle(): TList['title']
  /** Set the i18n key and namespace used to populate the localized title.
   * @param i18n - the key and namespaced used to populate the localized title.
   * @returns component builder based on i18n key and ns provided
   */
  i18n(i18n: I18nTextRecord<'title'>): ConcreteImpl
  /** Get i18n key and namespace used to populate the localized title
   * @returns the i18n key and namespace used to populate the localized title
   */
  getI18n(): TList['i18n']
  /** Set generic list layout
   * @param defaultLayout - generic list layout key.
   * @returns generic list builder based on layout provided.
   */
  defaultLayout(defaultLayout: PreviewLayoutKey): ConcreteImpl
  /** Get generic list layout
   * @returns generic list layout
   */
  getDefaultLayout(): TList['defaultLayout']
  /** Set generic list menu items
   * @param menuItems - generic list menu items. See {@link MenuItem} and {@link MenuItemBuilder}
   * @returns generic list builder based on menu items provided.
   */
  menuItems(menuItems: (MenuItem_2 | MenuItemBuilder_2)[] | undefined): ConcreteImpl
  /** Get generic list menu items
   * @returns generic list menu items
   */
  getMenuItems(): TList['menuItems']
  /** Set generic list menu item groups
   * @param menuItemGroups - generic list menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder}
   * @returns generic list builder based on menu item groups provided.
   */
  menuItemGroups(menuItemGroups: (MenuItemGroup_2 | MenuItemGroupBuilder_2)[]): ConcreteImpl
  /** Get generic list menu item groups
   * @returns generic list menu item groups
   */
  getMenuItemGroups(): TList['menuItemGroups']
  /** Set generic list child
   * @param child - generic list child. See {@link Child}
   * @returns generic list builder based on child provided (clone).
   */
  child(child: Child_2): ConcreteImpl
  /** Get generic list child
   * @returns generic list child
   */
  getChild(): TList['child']
  /** Set generic list can handle intent
   * @param canHandleIntent - generic list intent checker. See {@link IntentChecker}
   * @returns generic list builder based on can handle intent provided.
   */
  canHandleIntent(canHandleIntent?: IntentChecker_2): ConcreteImpl
  /** Get generic list can handle intent
   * @returns generic list can handle intent
   */
  getCanHandleIntent(): TList['canHandleIntent']
  /** Set generic list display options
   * @param enabled - allow / disallow for showing icons
   * @returns generic list builder based on display options (showIcons) provided.
   */
  showIcons(enabled?: boolean): ConcreteImpl
  /** Get generic list display options
   * @returns generic list display options (specifically showIcons)
   */
  getShowIcons(): boolean | undefined
  /** Set generic list initial value templates
   * @param templates - generic list initial value templates. See {@link InitialValueTemplateItemBuilder}
   * @returns generic list builder based on templates provided.
   */
  initialValueTemplates(
    templates:
      | InitialValueTemplateItem
      | InitialValueTemplateItemBuilder_2
      | Array<InitialValueTemplateItem | InitialValueTemplateItemBuilder_2>,
  ): ConcreteImpl
  /** Get generic list initial value templates
   * @returns generic list initial value templates
   */
  getInitialValueTemplates(): TList['initialValueTemplates']
  /** Serialize generic list
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns generic list object based on path provided in options. See {@link GenericList}
   */
  serialize(options?: SerializeOptions_2): GenericList_2
  /** Clone generic list builder (allows for options overriding)
   * @param _withSpec - generic list options.
   * @returns generic list builder.
   */
  abstract clone(_withSpec?: object): ConcreteImpl
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type GenericListInput = GenericListInput_2

/**
 * Interface for generic list input
 * Allows builders and only requires things not inferrable
 *
 * @public */
declare interface GenericListInput_2 extends StructureNode_2 {
  /** Input id */
  id: string
  /** Input title */
  title: string
  /** Input menu items groups. See {@link MenuItem} and {@link MenuItemBuilder} */
  menuItems?: (MenuItem_2 | MenuItemBuilder_2)[]
  /** Input menu items groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */
  menuItemGroups?: (MenuItemGroup_2 | MenuItemGroupBuilder_2)[]
  /** Input initial value array. See {@link InitialValueTemplateItem} and {@link InitialValueTemplateItemBuilder} */
  initialValueTemplates?: (InitialValueTemplateItem | InitialValueTemplateItemBuilder_2)[]
  /** Input default layout. */
  defaultLayout?: PreviewLayoutKey
  /** If input can handle intent. See {@link IntentChecker} */
  canHandleIntent?: IntentChecker_2
  /** Input child of type {@link Child} */
  child?: Child_2
}

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const GenericViewBuilder: typeof GenericViewBuilder_2

/**
 * Class for building generic views.
 *
 * @public
 */
declare abstract class GenericViewBuilder_2<TView extends Partial<BaseView_2>, ConcreteImpl>
  implements Serializable<BaseView_2>
{
  /** Generic view option object */
  protected spec: TView
  /** Set generic view ID
   * @param id - generic view ID
   * @returns generic view builder based on ID provided.
   */
  id(id: string): ConcreteImpl
  /** Get generic view ID
   * @returns generic view ID
   */
  getId(): TView['id']
  /** Set generic view title
   * @param title - generic view title
   * @returns generic view builder based on title provided and (if provided) its ID.
   */
  title(title: string): ConcreteImpl
  /** Get generic view title
   * @returns generic view title
   */
  getTitle(): TView['title']
  /** Set generic view icon
   * @param icon - generic view icon
   * @returns generic view builder based on icon provided.
   */
  icon(icon: React.ComponentType | React.ReactNode): ConcreteImpl
  /** Get generic view icon
   * @returns generic view icon
   */
  getIcon(): TView['icon']
  /** Serialize generic view
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns generic view object based on path provided in options. See {@link BaseView}
   */
  serialize(options?: SerializeOptions_2): BaseView_2
  /** Clone generic view builder (allows for options overriding)
   * @param withSpec - Partial generic view builder options. See {@link BaseView}
   * @returns Generic view builder.
   */
  abstract clone(withSpec?: Partial<BaseView_2>): ConcreteImpl
}

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const getOrderingMenuItem: typeof getOrderingMenuItem_2

/** @internal */
declare function getOrderingMenuItem_2(
  context: StructureContext_2,
  {by, title, i18n}: SortOrdering,
  extendedProjection?: string,
): MenuItemBuilder_2

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const getOrderingMenuItemsForSchemaType: typeof getOrderingMenuItemsForSchemaType_2

/** @internal */
declare function getOrderingMenuItemsForSchemaType_2(
  context: StructureContext_2,
  typeName: SchemaType | string,
): MenuItemBuilder_2[]

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const getTypeNamesFromFilter: typeof getTypeNamesFromFilter_2

/** @internal */
declare function getTypeNamesFromFilter_2(
  filter: string,
  params?: Record<string, unknown>,
): string[]

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const HELP_URL: typeof HELP_URL_2

/** @internal */
declare enum HELP_URL_2 {
  ID_REQUIRED = 'structure-node-id-required',
  TITLE_REQUIRED = 'structure-title-required',
  FILTER_REQUIRED = 'structure-filter-required',
  INVALID_LIST_ITEM = 'structure-invalid-list-item',
  COMPONENT_REQUIRED = 'structure-view-component-required',
  DOCUMENT_ID_REQUIRED = 'structure-document-id-required',
  DOCUMENT_TYPE_REQUIRED = 'structure-document-type-required',
  SCHEMA_TYPE_REQUIRED = 'structure-schema-type-required',
  SCHEMA_TYPE_NOT_FOUND = 'structure-schema-type-not-found',
  LIST_ITEMS_MUST_BE_ARRAY = 'structure-list-items-must-be-array',
  QUERY_PROVIDED_FOR_FILTER = 'structure-query-provided-for-filter',
  ACTION_OR_INTENT_REQUIRED = 'structure-action-or-intent-required',
  LIST_ITEM_IDS_MUST_BE_UNIQUE = 'structure-list-item-ids-must-be-unique',
  ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE = 'structure-action-and-intent-mutually-exclusive',
  API_VERSION_REQUIRED_FOR_CUSTOM_FILTER = 'structure-api-version-required-for-custom-filter',
}

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const InitialValueTemplateItemBuilder: typeof InitialValueTemplateItemBuilder_2

/**
 * A `InitialValueTemplateItemBuilder` is used to build a document node with an initial value set.
 *
 * @public
 */
declare class InitialValueTemplateItemBuilder_2 implements Serializable<InitialValueTemplateItem> {
  /**
   * Structure context. See {@link StructureContext}
   */
  protected _context: StructureContext_2
  /** Initial Value template item option object. See {@link InitialValueTemplateItem} */
  protected spec: Partial<InitialValueTemplateItem>
  constructor(
    /**
     * Structure context. See {@link StructureContext}
     */
    _context: StructureContext_2,
    spec?: Partial<InitialValueTemplateItem>,
  )
  /** Set initial value template item builder ID
   * @param id - initial value template item ID
   * @returns initial value template item based on ID provided. See {@link InitialValueTemplateItemBuilder}
   */
  id(id: string): InitialValueTemplateItemBuilder_2
  /** Get initial value template item builder ID
   * @returns initial value template item ID. See {@link InitialValueTemplateItem}
   */
  getId(): Partial<InitialValueTemplateItem>['id']
  /** Set initial value template item title
   * @param title - initial value template item title
   * @returns initial value template item based on title provided. See {@link InitialValueTemplateItemBuilder}
   */
  title(title: string): InitialValueTemplateItemBuilder_2
  /** Get initial value template item title
   * @returns initial value template item title. See {@link InitialValueTemplateItem}
   */
  getTitle(): Partial<InitialValueTemplateItem>['title']
  /** Set initial value template item description
   * @param description - initial value template item description
   * @returns initial value template item builder based on description provided. See {@link InitialValueTemplateItemBuilder}
   */
  description(description: string): InitialValueTemplateItemBuilder_2
  /** Get initial value template item description
   * @returns initial value template item description. See {@link InitialValueTemplateItem}
   */
  getDescription(): Partial<InitialValueTemplateItem>['description']
  /** Set initial value template ID
   * @param templateId - initial value template item template ID
   * @returns initial value template item based builder on template ID provided. See {@link InitialValueTemplateItemBuilder}
   */
  templateId(templateId: string): InitialValueTemplateItemBuilder_2
  /** Get initial value template item template ID
   * @returns initial value template item ID. See {@link InitialValueTemplateItem}
   */
  getTemplateId(): Partial<InitialValueTemplateItem>['templateId']
  /** Get initial value template item template parameters
   * @param parameters - initial value template item parameters
   * @returns initial value template item builder based on parameters provided. See {@link InitialValueTemplateItemBuilder}
   */
  parameters(parameters: {[key: string]: any}): InitialValueTemplateItemBuilder_2
  /** Get initial value template item template parameters
   * @returns initial value template item parameters. See {@link InitialValueTemplateItem}
   */
  getParameters(): Partial<InitialValueTemplateItem>['parameters']
  /** Serialize initial value template item
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns initial value template item object based on the path, index and hint provided in options. See {@link InitialValueTemplateItem}
   */
  serialize({path, index, hint}?: SerializeOptions_2): InitialValueTemplateItem
  /** Clone generic view builder (allows for options overriding)
   * @param withSpec - initial value template item builder options. See {@link InitialValueTemplateItemBuilder}
   * @returns initial value template item builder based on the context and options provided. See {@link InitialValueTemplateItemBuilder}
   */
  clone(withSpec?: Partial<InitialValueTemplateItem>): InitialValueTemplateItemBuilder_2
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type Intent = Intent_2

/**
 * Interface for intents
 * @public */
declare interface Intent_2 {
  /** Intent type */
  type: string
  /** Intent parameters. See {@link IntentParams}
   */
  params?: IntentParams_2
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type IntentChecker = IntentChecker_2

/**
 * Interface for intent checker
 *
 * @public
 */
declare interface IntentChecker_2 {
  (
    /** Intent name */
    intentName: string,
    /** Intent checker parameter */
    params: {
      [key: string]: any
    },
    /** Structure context. See {@link StructureNode} */
    context: {
      pane: StructureNode_2
      index: number
    },
  ): boolean
  /** intent checker identify */
  identity?: symbol
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type IntentJsonParams = IntentJsonParams_2

/**
 * Intent parameters (json)
 *
 * @public
 */
declare type IntentJsonParams_2 = {
  [key: string]: any
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type IntentParams = IntentParams_2

/**
 * Intent parameters
 * See {@link router.BaseIntentParams} and {@link router.IntentJsonParams}
 *
 * @public
 */
declare type IntentParams_2 = BaseIntentParams_2 | [BaseIntentParams_2, IntentJsonParams_2]

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const isDocumentListItem: typeof isDocumentListItem_2

/** @internal */
declare function isDocumentListItem_2(item: unknown): item is DocumentListItem_2

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type ItemChild = ItemChild_2

/**
 * Item Child. See {@link CollectionBuilder} and {@link Collection}
 *
 * @public
 */
declare type ItemChild_2 = CollectionBuilder_2 | Collection_2 | undefined

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type List = List_2

/**
 * Interface for List
 *
 * @public
 */
declare interface List_2 extends GenericList_2 {
  type: 'list'
  /** List items. See {@link ListItem} and {@link Divider} */
  items: (ListItem_2 | Divider_2)[]
}

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const ListBuilder: typeof ListBuilder_2

/**
 * A `ListBuilder` is used to build a list of items in the structure tool.
 *
 * @public */
declare class ListBuilder_2 extends GenericListBuilder_2<BuildableList_2, ListBuilder_2> {
  /**
   * Structure context. See {@link StructureContext}
   */
  protected _context: StructureContext_2
  /** buildable list option object. See {@link BuildableList} */
  protected spec: BuildableList_2
  constructor(
    /**
     * Structure context. See {@link StructureContext}
     */
    _context: StructureContext_2,
    spec?: ListInput_2,
  )
  /**
   * Set list builder based on items provided
   * @param items - list items. See {@link ListItemBuilder}, {@link ListItem} and {@link Divider}
   * @returns list builder based on items provided. See {@link ListBuilder}
   */
  items(items: (ListItemBuilder_2 | ListItem_2 | Divider_2)[]): ListBuilder_2
  /** Get list builder items
   * @returns list items. See {@link BuildableList}
   */
  getItems(): BuildableList_2['items']
  /** Serialize list builder
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns list based on path in options. See {@link List}
   */
  serialize(options?: SerializeOptions_2): List_2
  /**
   * Clone list builder and return new list builder based on context and spec provided
   * @param withSpec - list options. See {@link BuildableList}
   * @returns new list builder based on context and spec provided. See {@link ListBuilder}
   */
  clone(withSpec?: BuildableList_2): ListBuilder_2
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type ListDisplayOptions = ListDisplayOptions_2

/**
 * Interface for list display options
 *
 * @public */
declare interface ListDisplayOptions_2 {
  /** Check if list display should show icons */
  showIcons?: boolean
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type ListInput = ListInput_2

/**
 * Interface for list input
 *
 * @public
 */
declare interface ListInput_2 extends GenericListInput_2 {
  /** List input items array. See {@link ListItem}, {@link ListItemBuilder} and {@link Divider} */
  items?: (ListItem_2 | ListItemBuilder_2 | Divider_2)[]
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type ListItem = ListItem_2

/**
 * Interface for List Item
 *
 * @public */
declare interface ListItem_2 {
  /** List item id */
  id: string
  /** List item type */
  type: string
  /**
   * The i18n key and namespace used to populate the localized title. This is
   * the recommend way to set the title if you are localizing your studio.
   */
  i18n?: I18nTextRecord<'title'>
  /** List item title. Note that the `i18n` key and namespace will take precedence. */
  title?: string
  /** List item icon */
  icon?: React.ComponentType | React.ReactNode
  /** List item child. See {@link ListItemChild} */
  child?: ListItemChild_2
  /** List item display options. See {@link ListItemDisplayOptions} */
  displayOptions?: ListItemDisplayOptions_2
  /** List item schema type. See {@link SchemaType} */
  schemaType?: SchemaType
}

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const ListItemBuilder: typeof ListItemBuilder_2

/**
 * Class for building list items
 *
 * @public */
declare class ListItemBuilder_2 implements Serializable<ListItem_2> {
  /**
   * Structure context. See {@link StructureContext}
   */
  protected _context: StructureContext_2
  /** List item option object. See {@link PartialListItem} */
  protected spec: PartialListItem_2
  constructor(
    /**
     * Structure context. See {@link StructureContext}
     */
    _context: StructureContext_2,
    spec?: ListItemInput_2,
  )
  /**
   * Set list item ID
   * @returns list item builder based on ID provided. See {@link ListItemBuilder}
   */
  id(id: string): ListItemBuilder_2
  /**
   * Get list item ID
   * @returns list item ID. See {@link PartialListItem}
   */
  getId(): PartialListItem_2['id']
  /**
   * Set list item title
   * @returns list item builder based on title provided. See {@link ListItemBuilder}
   */
  title(title: string): ListItemBuilder_2
  /**
   * Get list item title
   * @returns list item title. See {@link PartialListItem}
   */
  getTitle(): PartialListItem_2['title']
  /** Set the i18n key and namespace used to populate the localized title.
   * @param i18n - the key and namespaced used to populate the localized title.
   * @returns component builder based on i18n key and ns provided
   */
  i18n(i18n: I18nTextRecord<'title'>): ListItemBuilder_2
  /** Get i18n key and namespace used to populate the localized title
   * @returns the i18n key and namespace used to populate the localized title
   */
  getI18n(): I18nTextRecord<'title'> | undefined
  /**
   * Set list item icon
   * @returns list item builder based on icon provided. See {@link ListItemBuilder}
   */
  icon(icon: React.ComponentType | React.ReactNode): ListItemBuilder_2
  /**
   * Set if list item should show icon
   * @returns list item builder based on showIcon provided. See {@link ListItemBuilder}
   */
  showIcon(enabled?: boolean): ListItemBuilder_2
  /**
   * Check if list item should show icon
   * @returns true if it should show the icon, false if not, undefined if not set
   */
  getShowIcon(): boolean | undefined
  /**
   *Get list item icon
   * @returns list item icon. See {@link PartialListItem}
   */
  getIcon(): PartialListItem_2['icon']
  /**
   * Set list item child
   * @param child - list item child. See {@link UnserializedListItemChild}
   * @returns list item builder based on child provided. See {@link ListItemBuilder}
   */
  child(child: UnserializedListItemChild_2): ListItemBuilder_2
  /**
   * Get list item child
   * @returns list item child. See {@link PartialListItem}
   */
  getChild(): PartialListItem_2['child']
  /**
   * Set list item schema type
   * @param schemaType - list item schema type. See {@link SchemaType}
   * @returns list item builder based on schema type provided. See {@link ListItemBuilder}
   */
  schemaType(schemaType: SchemaType | string): ListItemBuilder_2
  /**
   * Get list item schema type
   * @returns list item schema type. See {@link PartialListItem}
   */
  getSchemaType(): PartialListItem_2['schemaType']
  /** Serialize list item builder
   * @param options - serialization options. See {@link ListItemSerializeOptions}
   * @returns list item node based on path provided in options. See {@link ListItem}
   */
  serialize(options?: ListItemSerializeOptions_2): ListItem_2
  /** Clone list item builder
   * @param withSpec - partial list item options. See {@link PartialListItem}
   * @returns list item builder based on context and spec provided. See {@link ListItemBuilder}
   */
  clone(withSpec?: PartialListItem_2): ListItemBuilder_2
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type ListItemChild = ListItemChild_2

/**
 * Child of List Item
 * See {@link Collection}, {@link ChildResolver}, {@link ItemChild}
 * @public
 */
declare type ListItemChild_2 = Collection_2 | ChildResolver_2 | Observable<ItemChild_2> | undefined

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type ListItemDisplayOptions = ListItemDisplayOptions_2

/**
 * Interface for ist item display options
 *
 * @public */
declare interface ListItemDisplayOptions_2 {
  /** Check if list item display should show icon */
  showIcon?: boolean
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type ListItemInput = ListItemInput_2

/**
 * interface for list item input
 *
 * @public */
declare interface ListItemInput_2 {
  /** List item id */
  id: string
  /** List item title */
  title?: string
  /** List item icon */
  icon?: React.ComponentType | React.ReactNode
  /** List item child. See {@link ListItemChild} */
  child?: ListItemChild_2
  /** List item display options. See {@link ListItemDisplayOptions} */
  displayOptions?: ListItemDisplayOptions_2
  /** List item schema type. See {@link SchemaType} */
  schemaType?: SchemaType | string
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type ListItemSerializeOptions = ListItemSerializeOptions_2

/**
 * Interface for serialize list item options
 *
 * @public
 */
declare interface ListItemSerializeOptions_2 extends SerializeOptions_2 {
  /** Check if list item title is optional */
  titleIsOptional?: boolean
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type ListPaneNode = ListPaneNode_2

/** @internal */
declare interface ListPaneNode_2 extends BaseResolvedPaneNode<'list'> {
  defaultLayout?: GeneralPreviewLayoutKey
  displayOptions?: {
    showIcons?: boolean
  }
  items?: Array<PaneListItem_2 | PaneListItemDivider_2>
  source?: string
}

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const maybeSerializeInitialValueTemplateItem: typeof maybeSerializeInitialValueTemplateItem_2

/** @internal */
declare function maybeSerializeInitialValueTemplateItem_2(
  item: InitialValueTemplateItem | InitialValueTemplateItemBuilder_2,
  index: number,
  path: SerializePath_2,
): InitialValueTemplateItem

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const maybeSerializeMenuItem: typeof maybeSerializeMenuItem_2

/** @internal */
declare function maybeSerializeMenuItem_2(
  item: MenuItem_2 | MenuItemBuilder_2,
  index: number,
  path: SerializePath_2,
): MenuItem_2

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const maybeSerializeMenuItemGroup: typeof maybeSerializeMenuItemGroup_2

/** @internal */
declare function maybeSerializeMenuItemGroup_2(
  item: MenuItemGroup_2 | MenuItemGroupBuilder_2,
  index: number,
  path: SerializePath_2,
): MenuItemGroup_2

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const maybeSerializeView: typeof maybeSerializeView_2

/** @internal */
declare function maybeSerializeView_2(
  item: View_2 | Serializable<View_2>,
  index: number,
  path: SerializePath_2,
): View_2

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type MenuItem = MenuItem_2

/**
 * Interface for menu items
 *
 * @public */
declare interface MenuItem_2 {
  /**
   * The i18n key and namespace used to populate the localized title. This is
   * the recommend way to set the title if you are localizing your studio.
   */
  i18n?: I18nTextRecord<'title'>
  /**
   * Menu Item title. Note that the `i18n` configuration will take
   * precedence and this title is left here as a fallback if no i18n key is
   * provided and compatibility with older plugins
   */
  title: string
  /** Menu Item action */
  action?: MenuItemActionType_2
  /** Menu Item intent */
  intent?: Intent_2
  /** Menu Item group */
  group?: string
  /** Menu Item icon */
  icon?: React.ComponentType | React.ReactNode
  /** Menu Item parameters. See {@link MenuItemParamsType} */
  params?: MenuItemParamsType_2
  /** Determine if it will show the MenuItem as action */
  showAsAction?: boolean
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type MenuItemActionType = MenuItemActionType_2

/**
 * Menu item action type
 * @public */
declare type MenuItemActionType_2 =
  | string
  | ((params: Record<string, string> | undefined, scope?: any) => void)

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const MenuItemBuilder: typeof MenuItemBuilder_2

/**
 * Class for building menu items.
 *
 * @public */
declare class MenuItemBuilder_2 implements Serializable<MenuItem_2> {
  /**
   * Structure context. See {@link StructureContext}
   */
  protected _context: StructureContext_2
  /** menu item option object. See {@link PartialMenuItem} */
  protected spec: PartialMenuItem_2
  constructor(
    /**
     * Structure context. See {@link StructureContext}
     */
    _context: StructureContext_2,
    spec?: MenuItem_2,
  )
  /**
   * Set menu item action
   * @param action - menu item action. See {@link MenuItemActionType}
   * @returns menu item builder based on action provided. See {@link MenuItemBuilder}
   */
  action(action: MenuItemActionType_2): MenuItemBuilder_2
  /**
   * Get menu item action
   * @returns menu item builder action. See {@link PartialMenuItem}
   */
  getAction(): PartialMenuItem_2['action']
  /**
   * Set menu item intent
   * @param intent - menu item intent. See {@link Intent}
   * @returns menu item builder based on intent provided. See {@link MenuItemBuilder}
   */
  intent(intent: Intent_2): MenuItemBuilder_2
  /**
   * Get menu item intent
   * @returns menu item intent. See {@link PartialMenuItem}
   */
  getIntent(): PartialMenuItem_2['intent']
  /**
   * Set menu item title
   * @param title - menu item title
   * @returns menu item builder based on title provided. See {@link MenuItemBuilder}
   */
  title(title: string): MenuItemBuilder_2
  /**
   * Get menu item title. Note that the `i18n` configuration will take
   * precedence and this title is left here for compatibility.
   * @returns menu item title
   */
  getTitle(): string | undefined
  /**
   * Set the i18n key and namespace used to populate the localized title.
   * @param i18n - object with i18n key and related namespace
   * @returns menu item builder based on i18n config provided. See {@link MenuItemBuilder}
   */
  i18n(i18n: I18nTextRecord<'title'>): MenuItemBuilder_2
  /**
   * Get the i18n key and namespace used to populate the localized title.
   * @returns the i18n key and namespace used to populate the localized title.
   */
  getI18n(): I18nTextRecord<'title'> | undefined
  /**
   * Set menu item group
   * @param group - menu item group
   * @returns menu item builder based on group provided. See {@link MenuItemBuilder}
   */
  group(group: string): MenuItemBuilder_2
  /**
   * Get menu item group
   * @returns menu item group. See {@link PartialMenuItem}
   */
  getGroup(): PartialMenuItem_2['group']
  /**
   * Set menu item icon
   * @param icon - menu item icon
   * @returns menu item builder based on icon provided. See {@link MenuItemBuilder}
   */
  icon(icon: React.ComponentType | React.ReactNode): MenuItemBuilder_2
  /**
   * Get menu item icon
   * @returns menu item icon. See {@link PartialMenuItem}
   */
  getIcon(): PartialMenuItem_2['icon']
  /**
   * Set menu item parameters
   * @param params - menu item parameters. See {@link MenuItemParamsType}
   * @returns menu item builder based on parameters provided. See {@link MenuItemBuilder}
   */
  params(params: MenuItemParamsType_2): MenuItemBuilder_2
  /**
   * Get meny item parameters
   * @returns menu item parameters. See {@link PartialMenuItem}
   */
  getParams(): PartialMenuItem_2['params']
  /**
   * Set menu item to show as action
   * @param showAsAction - determine if menu item should show as action
   * @returns menu item builder based on if it should show as action. See {@link MenuItemBuilder}
   */
  showAsAction(showAsAction?: boolean): MenuItemBuilder_2
  /**
   * Check if menu item should show as action
   * @returns true if menu item should show as action, false if not. See {@link PartialMenuItem}
   */
  getShowAsAction(): PartialMenuItem_2['showAsAction']
  /** Serialize menu item builder
   * @param options - serialization options. See {@link SerializeOptions}
   * @returns menu item node based on path provided in options. See {@link MenuItem}
   */
  serialize(options?: SerializeOptions_2): MenuItem_2
  /** Clone menu item builder
   * @param withSpec - menu item options. See {@link PartialMenuItem}
   * @returns menu item builder based on context and spec provided. See {@link MenuItemBuilder}
   */
  clone(withSpec?: PartialMenuItem_2): MenuItemBuilder_2
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type MenuItemGroup = MenuItemGroup_2

/**
 * Interface for menu item groups
 * @public
 */
declare interface MenuItemGroup_2 {
  /** Menu group Id */
  id: string
  /** Menu group title */
  title: string
  i18n?: I18nTextRecord<'title'>
}

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const MenuItemGroupBuilder: typeof MenuItemGroupBuilder_2

/**
 * Class for building menu item groups.
 *
 * @public
 */
declare class MenuItemGroupBuilder_2 implements Serializable<MenuItemGroup_2> {
  /**
   * Structure context. See {@link StructureContext}
   */
  protected _context: StructureContext_2
  /** Menu item group ID */
  protected _id: string
  /** Menu item group title */
  protected _title: string
  protected _i18n?: I18nTextRecord<'title'>
  constructor(
    /**
     * Structure context. See {@link StructureContext}
     */
    _context: StructureContext_2,
    spec?: MenuItemGroup_2,
  )
  /**
   * Set menu item group ID
   * @param id - menu item group ID
   * @returns menu item group builder based on ID provided. See {@link MenuItemGroupBuilder}
   */
  id(id: string): MenuItemGroupBuilder_2
  /**
   * Get menu item group ID
   * @returns menu item group ID
   */
  getId(): string
  /**
   * Set menu item group title
   * @param title - menu item group title
   * @returns menu item group builder based on title provided. See {@link MenuItemGroupBuilder}
   */
  title(title: string): MenuItemGroupBuilder_2
  /**
   * Get menu item group title
   * @returns menu item group title
   */
  getTitle(): string
  /**
   * Set the i18n key and namespace used to populate the localized title.
   * @param i18n - object with i18n key and related namespace
   * @returns menu item group builder based on i18n info provided. See {@link MenuItemGroupBuilder}
   */
  i18n(i18n: I18nTextRecord<'title'>): MenuItemGroupBuilder_2
  /**
   * Get the i18n key and namespace used to populate the localized title.
   * @returns the i18n key and namespace used to populate the localized title.
   */
  getI18n(): I18nTextRecord<'title'> | undefined
  /**
   * Serialize menu item group builder
   * @param options - serialization options (path). See {@link SerializeOptions}
   * @returns menu item group based on path provided in options. See {@link MenuItemGroup}
   */
  serialize(options?: SerializeOptions_2): MenuItemGroup_2
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type MenuItemParamsType = MenuItemParamsType_2

/**
 * Menu items parameters
 *
 * @public */
declare type MenuItemParamsType_2 = Record<string, string | unknown | undefined>

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const menuItemsFromInitialValueTemplateItems: typeof menuItemsFromInitialValueTemplateItems_2

/** @internal */
declare function menuItemsFromInitialValueTemplateItems_2(
  context: StructureContext_2,
  templateItems: InitialValueTemplateItem[],
): MenuItem_2[]

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const PaneLayout: typeof PaneLayout_2

/**
 *
 * @hidden
 * @beta This API will change. DO NOT USE IN PRODUCTION.
 */
declare function PaneLayout_2(
  props: PaneLayoutProps &
    CardProps &
    Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref' | 'wrap'>,
): JSX_2.Element

/**
 *
 * @hidden
 * @beta This API will change. DO NOT USE IN PRODUCTION.
 */
declare interface PaneLayoutProps {
  minWidth?: number
  onCollapse?: () => void
  onExpand?: () => void
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type PaneListItem = PaneListItem_2

/** @internal */
declare interface PaneListItem_2<TParams = unknown> {
  type: 'listItem'
  id: string
  _id?: string
  schemaType?: SchemaType
  title: string
  i18n?: I18nTextRecord<'title'>
  icon?: React.ComponentType | false
  displayOptions?: {
    showIcon?: boolean
  }
  action?: (t: TParams) => unknown
  params?: TParams
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type PaneListItemDivider = PaneListItemDivider_2

/** @internal */
declare interface PaneListItemDivider_2 {
  type: 'divider'
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type PaneMenuItem = PaneMenuItem_2

/**
 * Represents what can be passed into `menuItems` inside of structure-tool panes
 *
 * @see BaseResolvedPaneNode
 *
 * @internal
 */
declare interface PaneMenuItem_2 extends MenuItem_2 {
  isDisabled?: boolean
  shortcut?: string
  selected?: boolean
  tone?: 'primary' | 'positive' | 'caution' | 'critical'
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type PaneMenuItemGroup = PaneMenuItemGroup_2

/** @internal */
declare interface PaneMenuItemGroup_2 {
  id: string
  title?: string
  i18n?: I18nTextRecord<'title'>
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type PaneNode = PaneNode_2

/** @internal */
declare type PaneNode_2 =
  | CustomComponentPaneNode_2
  | DocumentPaneNode_2
  | DocumentListPaneNode_2
  | ListPaneNode_2

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type PaneNodeResolver = PaneNodeResolver_2

/** @internal */
declare type PaneNodeResolver_2 = (
  id: string,
  context: RouterPaneSiblingContext_2,
) => UnresolvedPaneNode_2

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const PaneRouterContext: Context<PaneRouterContextValue_2>

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type PaneRouterContextValue = PaneRouterContextValue_2

/**
 * @hidden
 * @beta */
declare interface PaneRouterContextValue_2 {
  /**
   * Zero-based index (position) of pane, visually
   */
  index: number
  /**
   * Zero-based index of pane group (within URL structure)
   */
  groupIndex: number
  /**
   * Zero-based index of pane within sibling group
   */
  siblingIndex: number
  /**
   * Payload of the current pane
   */
  payload?: unknown
  /**
   * Params of the current pane
   */
  params?: RouterPaneSibling_2['params']
  /**
   * Whether or not the pane has any siblings (within the same group)
   */
  hasGroupSiblings: boolean
  /**
   * The length of the current group
   */
  groupLength: number
  /**
   * Current router state for the "panes" property
   */
  routerPanesState: RouterPanes_2
  /**
   * Curried StateLink that passes the correct state automatically
   */
  ChildLink: React_2.ComponentType<ChildLinkProps_2>
  /**
   * Curried StateLink that pops off the last pane group
   */
  BackLink?: React_2.ComponentType<BackLinkProps_2>
  /**
   * A specialized `ChildLink` that takes in the needed props to open a
   * referenced document to the right
   */
  ReferenceChildLink: React_2.ComponentType<ReferenceChildLinkProps_2>
  /**
   * Similar to `ReferenceChildLink` expect without the wrapping component
   */
  handleEditReference: (options: EditReferenceOptions_2) => void
  /**
   * Curried StateLink that passed the correct state, but merges params/payload
   */
  ParameterizedLink: React_2.ComponentType<ParameterizedLinkProps_2>
  /**
   * Replaces the current pane with a new one
   */
  replaceCurrent: (pane: {id?: string; payload?: unknown; params?: Record<string, string>}) => void
  /**
   * Removes the current pane from the group
   */
  closeCurrent: () => void
  /**
   * Removes all panes to the right including current pane
   */
  closeCurrentAndAfter: (expandLast?: boolean) => void
  /**
   * Duplicate the current pane, with optional overrides for item ID and parameters
   */
  duplicateCurrent: (pane?: {payload?: unknown; params?: Record<string, string>}) => void
  /**
   * Set the current "view" for the pane
   */
  setView: (viewId: string | null) => void
  /**
   * Set the parameters for the current pane
   */
  setParams: (params: Record<string, string | undefined>) => void
  /**
   * Set the payload for the current pane
   */
  setPayload: (payload: unknown) => void
  /**
   * A function that creates a path with the given parameters without navigating to it.
   * Useful for creating links that can be e.g. copied to clipboard and shared.
   */
  createPathWithParams: (params: Record<string, string | undefined>) => string
  /**
   * Proxied navigation to a given intent. Consider just exposing `router` instead?
   */
  navigateIntent: (
    intentName: string,
    params: Record<string, string>,
    options?: {
      replace?: boolean
    },
  ) => void
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type ParameterizedLinkProps = ParameterizedLinkProps_2

/**
 * @hidden
 * @beta */
declare interface ParameterizedLinkProps_2 {
  params?: Record<string, string>
  payload?: unknown
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type PartialDocumentList = PartialDocumentList_2

/**
 * Partial document list
 *
 * @public
 */
declare interface PartialDocumentList_2 extends BuildableGenericList_2 {
  /** Document list options. See {@link DocumentListOptions} */
  options?: DocumentListOptions_2
  /** Schema type name */
  schemaTypeName?: string
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type PartialDocumentListItem = PartialDocumentListItem_2

/**
 * Partial document list item
 *
 * @public
 */
declare type PartialDocumentListItem_2 = Partial<UnserializedListItem_2>

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type PartialDocumentNode = PartialDocumentNode_2

/**
 * Interface for partial document (focused on the document pane)
 *
 * @public */
declare interface PartialDocumentNode_2 {
  /** Document Id */
  id?: string
  /** Document title */
  title?: string
  /** I18n key and namespace used to populate the localized title */
  i18n?: I18nTextRecord<'title'>
  /** Document children of type {@link Child} */
  child?: Child_2
  /**
   * Views for the document pane. See {@link ViewBuilder} and {@link View}
   */
  views?: (View_2 | ViewBuilder_2)[]
  /**
   * Document options. See {@link DocumentOptions}
   */
  options?: Partial<DocumentOptions_2>
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type PartialListItem = PartialListItem_2

/**
 * Partial list item. See {@link UnserializedListItem}
 *
 * @public */
declare type PartialListItem_2 = Partial<UnserializedListItem_2>

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type PartialMenuItem = PartialMenuItem_2

/**
 * Partial menu items
 * @public
 */
declare type PartialMenuItem_2 = Partial<MenuItem_2>

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type ReferenceChildLinkProps = ReferenceChildLinkProps_2

/**
 * @hidden
 * @beta */
declare interface ReferenceChildLinkProps_2 {
  documentId: string
  documentType: string
  parentRefPath: Path
  template?: {
    id: string
    params?: Record<string, string | number | boolean>
  }
  children: React_2.ReactNode
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type RouterPaneGroup = RouterPaneGroup_2

/**
 * Represents a "pane group" in the router.
 *
 * @see RouterPanes
 *
 *
 * @hidden
 * @beta
 */
declare type RouterPaneGroup_2 = RouterPaneSibling_2[]

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type RouterPanes = RouterPanes_2

/**
 * Represents the state of the `panes` inside the structure-tool router
 *
 * - The structure tool stores the state of the current panes inside of the router.
 * - The panes are stored in groups delimited in the URL by `;`.
 * - In each group, there can be one or more sibling (aka split) panes delimited
 *   by `|`.
 * - Each item pane can contain it's own parameters and payloads
 * - Per item pane in each group, if not specified separately, the ID, params,
 *   and payload will be inherited from the first item pane in the pane group
 *   (unless it's an `exclusiveParam`)
 *
 * E.g. `/structure/books;book-123|,view=preview` will parse to:
 *
 * ```js
 * [
 *   // first pane group
 *   [{id: 'book'}],
 *
 *   // second pane group
 *   [
 *     [
 *       // first pane item
 *       {id: 'book-123'},
 *       // second pane item
 *       {id: 'book-123', params: {view: 'preview'}},
 *     ],
 *   ],
 * ]
 * ```
 *
 * @hidden
 * @beta
 */
declare type RouterPanes_2 = RouterPaneGroup_2[]

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type RouterPaneSibling = RouterPaneSibling_2

/**
 * Represents a "sibling pane" or "split pane" in the router.
 *
 * @see RouterPanes
 *
 *
 * @hidden
 * @beta
 */
declare interface RouterPaneSibling_2 {
  id: string
  params?: Record<string, string | undefined>
  payload?: unknown
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type RouterPaneSiblingContext = RouterPaneSiblingContext_2

/**
 * Passed as the second argument to the item of resolving pane children
 *
 * @see RouterPanes
 *
 * @internal
 */
declare interface RouterPaneSiblingContext_2 {
  id: string
  parent: PaneNode_2 | null
  index: number
  splitIndex: number
  path: string[]
  params: Record<string, string | undefined>
  payload: unknown
  structureContext: StructureContext_2
  serializeOptions?: {
    path: (string | number)[]
    index?: number
    hint?: string
  }
}

/**
 *  A interface for serializing a structure node to a plain JavaScript object.
 *
 * @public
 */
export declare interface Serializable<T> {
  serialize(options: SerializeOptions_2): T
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type SerializablePaneNode = SerializablePaneNode_2

/** @internal */
declare type SerializablePaneNode_2 = {
  serialize(context: RouterPaneSiblingContext_2): UnresolvedPaneNode_2
}

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const SerializeError: typeof SerializeError_2

/** @internal */
declare class SerializeError_2 extends Error {
  readonly path: SerializePath_2
  helpId?: HELP_URL_2
  constructor(
    message: string,
    parentPath: SerializePath_2,
    pathSegment: string | number | undefined,
    hint?: string,
  )
  withHelpUrl(id: HELP_URL_2): SerializeError_2
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type SerializeOptions = SerializeOptions_2

/**
 * Interface for seraializing a structure node
 * @public */
declare interface SerializeOptions_2 {
  /** path. See {@link SerializePath} */
  path: SerializePath_2
  /** index */
  index?: number
  /** hint */
  hint?: string
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type SerializePath = SerializePath_2

/**
 * Path of a serialized structure node
 *
 * @public
 */
declare type SerializePath_2 = (string | number)[]

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const shallowIntentChecker: IntentChecker_2

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type SortMenuItem = SortMenuItem_2

/** @internal */
declare interface SortMenuItem_2 extends MenuItem_2 {
  params: {
    by: SortOrderingItem[]
  }
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type StructureBuilder = StructureBuilder_2

/**
 * Interface for the structure builder.
 *
 * @public
 */
declare interface StructureBuilder_2 {
  /**
   * @internal
   */
  component: (spec?: ComponentInput_2 | UserComponent_2) => ComponentBuilder_2
  /** By giving an object of options with documentID and its schema type receive the the respective Document builder
   * @param options - an object holding the documentId and schemaType for the document node being resolved.
   * @returns a Document builder. See {@link DocumentBuilder}
   */
  defaultDocument: (options: {documentId?: string; schemaType: string}) => DocumentBuilder_2
  /** Get an array of Item builders that take Initial Value template into consideration
   * @returns an array of initial value template item builders. See {@link ListItemBuilder}
   */
  defaultInitialValueTemplateItems: () => InitialValueTemplateItemBuilder_2[]
  /** Get the default List builder
   * @returns a List builder. See {@link ListBuilder}
   */
  defaults: () => ListBuilder_2
  /** Get a structure Divider
   * @returns a Divider. See {@link Divider}
   */
  divider: () => Divider_2
  /** By giving a partial Document Node receive the respective Document Builder
   * @param spec - a partial document node. See {@link PartialDocumentNode}
   * @returns a Document builder. See {@link DocumentBuilder}
   */
  document: (spec?: PartialDocumentNode_2) => DocumentBuilder_2
  /** By giving a Document List Input receive the respective Document List Builder
   * @param spec - a document list input. See {@link DocumentListInput}
   * @returns a Document List builder. See {@link DocumentListBuilder}
   */
  documentList: (spec?: DocumentListInput_2) => DocumentListBuilder_2
  /** By giving a Document List Item Input receive the respective Document List Item builder
   * @param spec - a document list item input. See {@link DocumentListItemInput}
   * @returns a Document List Item builder. See {@link DocumentListItemBuilder}
   */
  documentListItem: (spec?: DocumentListItemInput_2) => DocumentListItemBuilder_2
  /** By giving a type name or Document Type List Input receive the respective Document List Builder
   * @param typeNameOrSpec - a type name or a document type list input. See {@link DocumentTypeListInput}
   * @returns a Document List builder. See {@link DocumentListBuilder}
   */
  documentTypeList: (typeNameOrSpec: string | DocumentTypeListInput_2) => DocumentListBuilder_2
  /** By providing a type name receive a List Item builder
   * @param typeName - a type name
   * @returns a List Item builder. See {@link ListItemBuilder}
   */
  documentTypeListItem: (typeName: string) => ListItemBuilder_2
  /** Get an array of List Item builders
   * @returns an array of list item builders. See {@link ListItemBuilder}
   */
  documentTypeListItems: () => ListItemBuilder_2[]
  /** By giving a templateID and a set of parameters receive a Document builder that takes InitialValueTemplate into account
   * @param templateId - a template ID
   * @param parameters - an object of parameters
   * @returns a Document builder. See {@link DocumentBuilder}
   */
  documentWithInitialValueTemplate: (
    templateId: string,
    parameters?: Record<string, unknown>,
  ) => DocumentBuilder_2
  /** By giving a Editor Node receive the respective Document Builder
   * @param spec - an editor node. See {@link EditorNode}
   * @returns a Document builder. See {@link DocumentBuilder}
   */
  editor: (spec?: EditorNode_2) => DocumentBuilder_2
  /** By giving a templateID and a set of parameters receive an Item Builder that takes InitialValueTemplate into account
   * @param templateId - a template ID
   * @param parameters - an object of parameters
   * @returns an Item builder. See {@link ListItemBuilder}
   */
  initialValueTemplateItem: (
    templateId: string,
    parameters?: Record<string, any>,
  ) => InitialValueTemplateItemBuilder_2
  /** By giving a List Input receive the respective Builder, otherwise return default ListBuilder builder
   * @param spec - a list input. See {@link ListInput}
   * @returns a List builder. See {@link ListBuilder}
   */
  list: (spec?: ListInput_2) => ListBuilder_2
  /** By giving a List Item Input receive the respective Builder, otherwise return default ListItem builder
   * @param spec - a list item input. See {@link ListItemInput}
   * @returns a List Item builder. See {@link ListItemBuilder}
   */
  listItem: (spec?: ListItemInput_2) => ListItemBuilder_2
  /** By giving a Menu Item receive the respective Builder, otherwise return default MenuItem builder
   * @param spec - a menu item. See {@link MenuItem}
   * @returns a Menu Item builder. See {@link MenuItemBuilder}
   */
  menuItem: (spec?: MenuItem_2) => MenuItemBuilder_2
  /** By giving a Menu Item Group receive the respective Builder
   * @param spec - a menu item group. See {@link MenuItemGroup}
   * @returns a Menu Item Group builder. See {@link MenuItemGroupBuilder}
   */
  menuItemGroup: (spec?: MenuItemGroup_2) => MenuItemGroupBuilder_2
  /** By giving an array of initial value template receive an array of Menu Items, otherwise return default MenuItem builder
   * @param templateItems - an array of initial value template items. See {@link InitialValueTemplateItem}
   * @returns an array of Menu Items. See {@link MenuItem}
   */
  menuItemsFromInitialValueTemplateItems: (
    templateItems: InitialValueTemplateItem[],
  ) => MenuItem_2[]
  /** By giving a sort ordering object receive a Menu Item Builder
   * @param ordering - a sort ordering object. See {@link SortOrdering}
   * @returns a Menu Item builder. See {@link MenuItemBuilder}
   */
  orderingMenuItem: (ordering: SortOrdering) => MenuItemBuilder_2
  /** By giving a type receive a list of Menu Items ordered by it
   * @param type - a type
   * @returns an array of Menu Items. See {@link MenuItem}
   */
  orderingMenuItemsForType: (type: string) => MenuItemBuilder_2[]
  /** View for structure */
  view: {
    /** form for view
     * @param spec - a partial form view. See {@link FormView}
     * @returns a Form View builder. See {@link FormViewBuilder}
     */
    form: (spec?: Partial<FormView_2>) => FormViewBuilder_2
    /** component for view
     * @param componentOrSpec - a partial component view or a React component. See {@link ComponentView}
     * @returns a Component View builder. See {@link ComponentViewBuilder}
     */
    component: (
      componentOrSpec?: Partial<ComponentView_2> | React.ComponentType<any>,
    ) => ComponentViewBuilder_2
  }
  /** Context for the structure builder. See {@link StructureContext} */
  context: StructureContext_2
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type StructureBuilderOptions = StructureBuilderOptions_2

/** @internal */
declare interface StructureBuilderOptions_2 {
  source: Source
  defaultDocumentNode?: DefaultDocumentNodeResolver_2
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type StructureContext = StructureContext_2

/**
 * Interface for the structure builder context.
 *
 * @public
 */
declare interface StructureContext_2 extends Source {
  /** Resolve document method
   * @returns a document node builder, or null/undefined if no document node should be returned.
   * See {@link DocumentBuilder}
   */
  resolveDocumentNode: (
    /** an object holding the documentId and schemaType for the document node being resolved. */
    options: {
      documentId?: string
      schemaType: string
    },
  ) => DocumentBuilder_2
  /** Get structure builder
   * @returns a structure builder. See {@link StructureBuilder}
   */
  getStructureBuilder: () => StructureBuilder_2
}

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const structureLocaleNamespace: 'structure'

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type StructureLocaleResourceKeys = StructureLocaleResourceKeys_2

/**
 * @alpha
 */
declare type StructureLocaleResourceKeys_2 = keyof typeof structureLocaleStrings

/**
 * Defined locale strings for the structure tool, in US English.
 *
 * @internal
 */
declare const structureLocaleStrings: any

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type StructureNode = StructureNode_2

/**
 * Interface for the structure builder node.
 *
 * @public
 */
declare interface StructureNode_2 {
  /** Node ID */
  id: string
  /** Node ID */
  title?: string
  i18n?: I18nTextRecord<'title'>
  /** Node type */
  type?: string
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type StructureResolver = StructureResolver_2

/**
 * Lets you configure how lists, documents, views, menus, and initial value templates are organized in the Sanity Studio’s structure-tool.
 *
 * @public
 *
 * @returns A structure builder, or null/undefined if no structure should be returned. See {@link StructureBuilder}
 * @example Configuring structure
 * ```ts
 * // sanity.config.js
 *
 * import {defineConfig} from 'sanity'
 * import {structureTool} from 'sanity/structure'
 * import {schemaTypes} from './schema'
 *
 * export default defineConfig({
 *  name: 'default',
 *  title: 'My Cool Project',
 *  projectId: 'my-project-id',
 *  dataset: 'production',
 *  plugins: [
 *    structureTool({
 *      structure: (S, context) => {
 *        console.log(context) // returns { currentUser, dataset, projectId, schema, getClient, documentStore }
 *        return S.documentTypeList('post')
 *      },
 *    })
 *  ],
 *  schema: schemaTypes
 * })
 * ```
 *
 */
declare type StructureResolver_2 = (
  /**
   * S - An instance of the structure builder, that can be used to build the lists/items/panes for the structure tool
   * context - an object holding various context that may be used to customize the structure, for instance the current user.
   *  Defaults to
   * ```ts
   * (S) => S.defaults()
   * ```
   * See {@link StructureBuilder}
   */
  S: StructureBuilder_2,
  /**
   * An object containing pane and index information for the current structure tool.
   * See {@link StructureResolverContext}
   */
  context: StructureResolverContext_2,
) => unknown

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type StructureResolverContext = StructureResolverContext_2

/**
 *  Structure tool context. Extends from {@link ConfigContext}.
 *  @hidden
 *  @public
 */
declare interface StructureResolverContext_2 extends ConfigContext {
  /**
   * This can be replaced by a different API in the future.
   * It is provided as-is to support common structure patterns found in V2 in V3.
   * @alpha
   * */
  documentStore: DocumentStore
  /** @alpha */
  i18n: LocaleSource
}

/** @internal */
declare interface StructureToolContextValue {
  features: StructureToolFeatures
  layoutCollapsed: boolean
  setLayoutCollapsed: (layoutCollapsed: boolean) => void
  rootPaneNode: UnresolvedPaneNode_2
  structureContext: StructureContext_2
}

/** @internal */
declare interface StructureToolFeatures {
  /**
   * @hidden
   * @beta
   */
  backButton: boolean
  resizablePanes: boolean
  reviewChanges: boolean
  splitPanes: boolean
  splitViews: boolean
}

/**
 * The params for the `structureTool` api. See {@link structureTool}
 *
 * @public */
declare interface StructureToolOptions {
  icon?: React.ComponentType
  name?: string
  /**
     * A workspace can have different "sources". These sources were meant to allow using multiple datasets within the same workspace, for instance.
     * This is not supported yet, but the API is still here.
     *
     @hidden
     @alpha
     */
  source?: string
  /**
   * A structure resolver function. See {@link StructureResolver}
   */
  structure?: StructureResolver_2
  /**
   * A resolver function used to return the default document node used when editing documents. See {@link DefaultDocumentNodeResolver}
   */
  defaultDocumentNode?: DefaultDocumentNodeResolver_2
  /**
   * The title that will be displayed for the tool. Defaults to Structure
   */
  title?: string
}

/** @internal */
declare type StructureToolPaneActionHandler = (params: any, scope?: unknown) => void

/** @internal */
declare function StructureToolProvider({
  defaultDocumentNode,
  structure: resolveStructure,
  children,
}: StructureToolProviderProps): React_3.ReactElement

/** @internal */
declare interface StructureToolProviderProps {
  structure?: StructureResolver_2
  defaultDocumentNode?: DefaultDocumentNodeResolver_2
  children: React_3.ReactNode
}

/** @internal */
declare type TimelineMode = 'since' | 'rev' | 'closed'

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type UnresolvedPaneNode = UnresolvedPaneNode_2

/** @internal */
declare type UnresolvedPaneNode_2 =
  | PaneNodeResolver_2
  | SerializablePaneNode_2
  | Observable<UnresolvedPaneNode_2>
  | PromiseLike<UnresolvedPaneNode_2>
  | PaneNode_2

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type UnserializedListItem = UnserializedListItem_2

/**
 * Interface for unserialized list items.
 *
 * @public
 */
declare interface UnserializedListItem_2 {
  /** List item ID */
  id: string
  /** List item title */
  title: string
  /**
   * The i18n key and namespace used to populate the localized title. This is
   * the recommend way to set the title if you are localizing your studio.
   */
  i18n?: I18nTextRecord<'title'>
  /** List item icon */
  icon?: React.ComponentType | React.ReactNode
  /** List item child. See {@link UnserializedListItemChild} */
  child?: UnserializedListItemChild_2
  /** List item display options. See {@link ListItemDisplayOptions} */
  displayOptions?: ListItemDisplayOptions_2
  /** List item schema. See {@link SchemaType} */
  schemaType?: SchemaType | string
}

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type UnserializedListItemChild = UnserializedListItemChild_2

/**
 * Unserialized list item child.
 * See {@link Collection}, {@link CollectionBuilder}, {@link ChildResolver} and {@link ItemChild}
 *
 * @public
 */
declare type UnserializedListItemChild_2 =
  | Collection_2
  | CollectionBuilder_2
  | ChildResolver_2
  | Observable<ItemChild_2>

/**
 * @deprecated Import `useStructureTool` from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const useDeskTool: typeof useStructureTool

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const useDocumentPane: typeof useDocumentPane_2

/** @internal */
declare function useDocumentPane_2(): DocumentPaneContextValue

/**
 * useDocumentTitle hook return type.
 *
 * @beta
 * @hidden
 */
declare interface UseDocumentTitle {
  error?: string
  title?: string
}

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const useDocumentTitle: typeof useDocumentTitle_2

/**
 * React hook that returns the document title for the current document in the document pane.
 *
 * @beta
 * @hidden
 *
 * @returns The document title or error. See {@link UseDocumentTitle}
 */
declare function useDocumentTitle_2(): UseDocumentTitle

/**
 * @deprecated Import from `sanity/structure` instead!
 * @hidden
 * @beta
 */
export declare const usePaneRouter: typeof usePaneRouter_2

/**
 *
 * @hidden
 * @beta
 */
declare function usePaneRouter_2(): PaneRouterContextValue_2

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type UserComponent = UserComponent_2

/**
 * User defined component
 *
 * @public
 */
declare type UserComponent_2 = React.ComponentType<{
  /** Component child. See {@link ComponentBuilder} */
  child?: ComponentBuilder_2
  /** Component child item ID */
  childItemId?: string
  /** Component ID */
  id: string
  /** Is component active */
  isActive?: boolean
  /** Is component selected */
  isSelected?: boolean
  /** item ID */
  itemId: string
  /** Component options */
  options?: Record<string, unknown>
  /** Pane key */
  paneKey: string
  /** URL parameters */
  urlParams: Record<string, string | undefined> | undefined
}>

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type UserViewComponent = UserViewComponent_2

/**
 * User view component
 *
 * @public */
declare type UserViewComponent_2<TOptions = Record<string, any>> = React.ComponentType<{
  document: {
    draft: SanityDocument | null
    displayed: Partial<SanityDocument>
    historical: Partial<SanityDocument> | null
    published: SanityDocument | null
  }
  documentId: string
  options: TOptions
  schemaType: SchemaType
}>

/** @internal */
declare function useStructureTool(): StructureToolContextValue

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type View = View_2

/**
 * View. See {@link FormView} and {@link ComponentView}
 *
 * @public
 */
declare type View_2 = FormView_2 | ComponentView_2

/**
 * @deprecated Import from `sanity/structure` instead
 * @hidden
 * @beta
 */
export declare type ViewBuilder = ViewBuilder_2

/**
 * View builder. See {@link ComponentViewBuilder} and {@link FormViewBuilder}
 *
 * @public
 */
declare type ViewBuilder_2 = ComponentViewBuilder_2 | FormViewBuilder_2

export {}
